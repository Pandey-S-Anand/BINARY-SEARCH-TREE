/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

/*
 * A height-balanced Binary Search Tree (BST) is a BST where the depth of the
 * left and right subtrees of every node differs by at most one.
 * 
 * To achieve balance, we utilize the sorted property of an inorder traversal
 * of a BST. The middle element of the sorted array is chosen as
 * the root. This ensures that the left and right subtrees have nearly equal
 * depth, differing by at most one. The left portion of the array constructs
 * the left subtree, while the right portion forms the right subtree.
 *
 * Example:
 * Given a sorted array:
 * 
 * nums = [1, 2, 3, 4, 5, 6, 7, 8] (Inorder traveral of a BST)
 * 
 * The resulting height-balanced BST:
 * 
 *    4
 *   / \
 *  2   6
 * / \ / \
 * 1 3 5 7
 *        \
 *         8
 * 
 * Depth Analysis:
 * - The left subtree has a maximum depth of 2 (4 → 2 → (1 or 3)).
 * - The right subtree has a maximum depth of 3 (4 → 6 → 7 → 8).
 * - Since the depth difference is at most 1, this tree qualifies as a
 * height-balanced BST.
 */

class Solution {
    private List<Integer> inorderTraversal; // List to store the inorder traversal of the BST

    public TreeNode balanceBST(TreeNode root) {
        inorderTraversal = new ArrayList<>();
        findInorderTraversal(root); // Obtain the inorder traversal of BST

        // Construct a height-balanced BST from the sorted inorder traversal
        return sortedArrayToBST(inorderTraversal, 0, inorderTraversal.size() - 1);
    }

    private void findInorderTraversal(TreeNode root) {
        if (root == null) {
            return; // Base case: If the node is null, return
        }

        findInorderTraversal(root.left); // Traverse the left subtree
        inorderTraversal.add(root.val); // Store the current node's value
        findInorderTraversal(root.right); // Traverse the right subtree
    }

    private TreeNode sortedArrayToBST(List<Integer> arr, int low, int high) {
        // Base case: If the low index exceeds the high index, return null (no node to create)
        if (low > high) {
            return null;
        }

        // Find the middle element to make it the root of the current subtree
        int mid = low + (high - low) / 2;
        TreeNode node = new TreeNode(arr.get(mid)); // Create a new node with the middle element

        // Recursively construct the left subtree using the left half of the array
        node.left = sortedArrayToBST(arr, low, mid - 1);

        // Recursively construct the right subtree using the right half of the array
        node.right = sortedArrayToBST(arr, mid + 1, high);

        // Return the root node of the newly constructed subtree
        return node;
    }
}
