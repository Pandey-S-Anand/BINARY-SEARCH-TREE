//Naive approach

class GFG {
    public static Node constructTree(int postorder[], int n) {
        // Call the helper function with the entire range of the array (0 to n-1)
        return constructTree(postorder, 0, n - 1);
    }

    private static Node constructTree(int postorder[], int low, int high) {
        // Base case: If low index exceeds high index, the subtree is empty
        if (low > high) {
            return null;
        }

        // The last element in the current range (postorder[high]) is the root of the tree/subtree
        Node node = new Node(postorder[high]);

        int index = high - 1;

        // Traverse backwards to find the first element smaller than the root. The elements greater than the root will form the right subtree
        while (index >= 0 && postorder[index] > postorder[high]) {
            index--;
        }

        // Recursively construct the right subtree with the elements greater than the root
        node.right = constructTree(postorder, index + 1, high - 1);

        // Recursively construct the left subtree with the elements smaller than the root
        node.left = constructTree(postorder, low, index);

        // Return the root node of the constructed subtree
        return node;
    }
}



//Optimal approach

class GFG {
    // Static index to keep track of the current node in postorder traversal
    private static int index;

    public static Node constructTree(int postorder[], int n) {
        // Initialize index to point to the last element (root of BST in postorder)
        index = n - 1;
        // Call helper function with initial range of values
        return constructTree(postorder, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    
    private static Node constructTree(int postorder[], int min, int max) {
        // Base condition: if index is out of bounds or current value is not in the valid range
        if (index < 0 || postorder[index] < min || postorder[index] > max) {
            return null; 
        }
        
        // Fetch the current value from postorder and decrement index
        int value = postorder[index--];
        
        // Create a new node with this value
        Node node = new Node(value);
        
        // Construct the right subtree before the left subtree because postorder traversal is: Left -> Right -> Root
        node.right = constructTree(postorder, value, max);
        
        // Construct the left subtree
        node.left = constructTree(postorder, min, value);
        
        // Return the constructed node
        return node;
    }
}
