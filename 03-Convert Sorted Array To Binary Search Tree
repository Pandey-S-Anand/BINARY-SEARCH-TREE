/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

/*
 * A height-balanced binary search tree is a BST where the depth of the left 
 * and right subtrees of every node differs by at most one.
 * 
 * To maintain balance, the middle element of the sorted array is chosen as 
 * the root. This ensures that the left and right subtrees have nearly equal 
 * depth, differing by at most one. The left portion of the array constructs 
 * the left subtree, while the right portion forms the right subtree.
 * 
 * Consider the sorted array:
 * 
 * nums = [1, 2, 3, 4, 5, 6, 7, 8]
 * 
 * 
 * The final BST:
 * 
 *         4
 *        / \
 *       2   6
 *      / \  / \
 *     1   3 5  7
 *                \
 *                 8
 * 
 * Why is the depth unbalanced?
 * - The left subtree has a maximum depth of 2 (4 → 2 → (1 or 3)).
 * - The right subtree has a maximum depth of 3 (4 → 6 → 7 → 8).
 * - The depth differs by 1, which is acceptable in a height-balanced BST.
 */

class Solution {
    public TreeNode sortedArrayToBST(int[] arr) {
        // Start the recursive function with the full range of the array
        return sortedArrayToBST(arr, 0, arr.length - 1);
    }

    private TreeNode sortedArrayToBST(int[] arr, int low, int high) {
        // Base case: If the low index exceeds the high index, return null (no node to create)
        if (low > high) {
            return null;
        }

        // Find the middle element to make it the root of the subtree
        int mid = low + (high - low) / 2;
        TreeNode node = new TreeNode(arr[mid]); // Create a new node with the middle element

        // Recursively construct the left subtree using the left half of the array
        node.left = sortedArrayToBST(arr, low, mid - 1);

        // Recursively construct the right subtree using the right half of the array
        node.right = sortedArrayToBST(arr, mid + 1, high);

        // Return the root node of the subtree
        return node;
    }
}
