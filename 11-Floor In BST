//Recursive approach

//Intuitve implementation

class Solution {
    // Variable to store the floor value of the given key.
    private static int floor;
    
    public static int floor(Node root, int key) {
        // Initialize floor to -1 (indicating no floor found initially).
        floor = -1;
        
        // Call the recursive helper function to find the floor value.
        findFloor(root, key);
        
        return floor;
    }

    private static void findFloor(Node root, int key) {
        // Base case: If the current node is null, return.
        if (root == null) {
            return;
        }  

        // If the key is exactly equal to the current node's value, then the floor is the current node itself.
        if (key == root.data) {
            floor = root.data; 
            return;
        }

         /* If the key is greater than the current node's value:
           - The current node becomes a potential floor (since it's smaller than or equal to the key).
           - Continue searching in the right subtree to find a closer floor (if available).
         */
        if (key > root.data) {
            floor = root.data;  // Update floor value.
            findFloor(root.right, key);  // Search in the right subtree for a closer match.
            return;
        }

        // If the key is smaller than the current node's value: - The floor must exist in the left subtree (if it exists).
        findFloor(root.left, key); 
    }
}


//Optimal impementation

class Solution {
    public static int floor(Node root, int key) {
        // Base case: If the tree is empty (root is null), return -1 (no valid floor).
        if (root == null) {
            return -1;
        }  

        // If the key matches the current nodeâ€™s value, return the current node's value as the floor.
        if (key == root.data) {
            return key;
        }

        // If the key is greater than the current node's value: - The floor could be this node, but we still need to check if there is a larger valid floor in the right subtree.
        if (key > root.data) {
            int rightFloor = floor(root.right, key); // Recursively search in the right subtree.

            // If the right subtree does not contain a valid floor (-1), return the current node's value.
            if (rightFloor == -1) {
                return root.data;
            }

            // If a valid floor is found in the right subtree, return that.
            return rightFloor;
        }

        // If the key is smaller than the current node's value: - The floor must exist in the left subtree, so recursively search there.
        return floor(root.left, key); 
    }
}


//Iterative approach

class Solution {
    public static int floor(Node root, int key) {
        int floor = -1;

        while (root != null) {
            if (root.data == key) {
                return key;
            }

            if (key > root.data) {
                floor = root.data;
                root = root.right;
            } else {
                root = root.left;
            }
        }

        return floor;
    }
}
