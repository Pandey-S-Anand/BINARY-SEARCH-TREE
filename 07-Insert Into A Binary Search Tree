/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {
    public TreeNode insertIntoBST(TreeNode root, int target) {
        // Base case: If the tree is empty, create a new node with the target value.
        if (root == null) {
            return new TreeNode(target);
        }

        // If the target value is smaller, recurse into the left subtree.
        if (target < root.val) {
            root.left = insertIntoBST(root.left, target);
        }

        // If the target value is greater, recurse into the right subtree.
        if (target > root.val) {
            root.right = insertIntoBST(root.right, target);
        }

        // Return the original root node (unchanged except for the insertion).
        return root;
    }
}
