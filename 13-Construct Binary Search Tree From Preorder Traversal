/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Naive approach

class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        // Start the recursive construction of the tree, from the entire array (0 to preorder.length - 1)
        return bstFromPreorder(preorder, 0, preorder.length - 1);
    }

    // Helper function to recursively build the BST
    private TreeNode bstFromPreorder(int[] preorder, int low, int high) {
        // Base case: If low index exceeds high index, the subtree is empty
        if (low > high) {
            return null;
        }

        // The first element in the preorder array (preorder[low]) is the root of the tree/subtree
        TreeNode root = new TreeNode(preorder[low]);

        // Find the first element that is greater than the root (preorder[low]) to split the array into left and right subtrees
        int index = low + 1;
        while (index < preorder.length && preorder[index] < preorder[low]) {
            index++;
        }

        // Recursively build the left subtree with elements that are less than the root
        root.left = bstFromPreorder(preorder, low + 1, index - 1);
        
        // Recursively build the right subtree with elements that are greater than the root
        root.right = bstFromPreorder(preorder, index, high);

        // Return the constructed subtree rooted at 'root'
        return root;
    }
}


// Optimal approach

class Solution {
    // Index to track the current position in the preorder array
    private int index = 0;

    public TreeNode bstFromPreorder(int[] preorder) {
        // Call the helper function with the full valid range of BST values
        return bstFromPreorder(preorder, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    private TreeNode bstFromPreorder(int[] preorder, int min, int max) {
        // Base case: If all elements are processed or the current value is out of range, return null
        if (index == preorder.length || preorder[index] < min || preorder[index] > max) {
            return null;
        }

        // Get the current value and move to the next element
        int value = preorder[index++];
        TreeNode root = new TreeNode(value);

        // Recursively construct the left subtree with an updated max boundary
        root.left = bstFromPreorder(preorder, min, value);

        // Recursively construct the right subtree with an updated min boundary
        root.right = bstFromPreorder(preorder, value, max);

        return root; // Return the constructed subtree
    }
}
